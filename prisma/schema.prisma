// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// ‚úÖ ENUM GENDER - AGREGADO PARA DEMOGRAF√çA
enum Gender {
  MALE
  FEMALE
  NON_BINARY
  PREFER_NOT_TO_SAY
}
// ‚úÖ ENUM ACCOUNT STATUS - AGREGADO PARA GESTI√ìN DE CUENTAS
enum AccountStatus {
  ACTIVE
  SUSPENDED
  TRIAL
  INACTIVE
}
// TABLA 1: Cuentas empresa (multi-tenancy)
model Account {
  id               String  @id @default(cuid())
  companyName      String  @map("company_name")
  companyLogo      String? @map("company_logo") // ‚Üê ESTO ES CORRECTO
  industry         String?
  companySize      String? @map("company_size") // micro/peque√±a/mediana
  adminEmail       String  @unique @map("admin_email")
  adminName        String  @map("admin_name")
  passwordHash     String  @map("password_hash")
  subscriptionTier String  @default("free") @map("subscription_tier")

  // üëá AGREGAR SOLO ESTA L√çNEA
  role              String    @default("CLIENT")  // Valores: CLIENT, FOCALIZAHR_ADMIN
  // üëá NUEVA L√çNEA - Agregar aqu√≠
  status            AccountStatus @default(ACTIVE) @map("status")

  // Configuraciones parametrizables:
  maxActiveCampaigns         Int @default(1) @map("max_active_campaigns")
  maxParticipantsPerCampaign Int @default(500) @map("max_participants_per_campaign")
  maxCampaignDurationDays    Int @default(30) @map("max_campaign_duration_days")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relaciones
  campaigns   Campaign[]
  auditLogs   AuditLog[]
  departments Department[]
  users User[] // AGREGAR solo esta l√≠nea

  @@index([adminEmail], map: "idx_accounts_email")
  @@index([subscriptionTier], map: "idx_accounts_tier")
  @@map("accounts")
}

// TABLA 2: Tipos de campa√±a/estudio
model CampaignType {
  id                String   @id @default(cuid())
  name              String
  slug              String   @unique // pulso-express, experiencia-full
  description       String?
  estimatedDuration Int?     @map("estimated_duration") // minutos
  questionCount     Int?     @map("question_count")
  methodology       String?
  category          String? // clima, experiencia, beneficios
  isActive          Boolean  @default(true) @map("is_active")
  sortOrder         Int      @default(0) @map("sort_order")
  createdAt         DateTime @default(now()) @map("created_at")

  // Relaciones
  campaigns Campaign[]
  questions Question[]
  surveyConfiguration SurveyConfiguration?

  @@index([isActive], map: "idx_campaign_types_active")
  @@index([category], map: "idx_campaign_types_category")
  @@map("campaign_types")
}

// TABLA 3: Campa√±as/estudios
model Campaign {
  id             String   @id @default(cuid())
  accountId      String   @map("account_id")
  campaignTypeId String   @map("campaign_type_id")
  name           String
  description    String?
  startDate      DateTime @map("start_date") @db.Date
  endDate        DateTime @map("end_date") @db.Date
  status         String   @default("draft") // draft, active, completed, cancelled

  // Configuraci√≥n campa√±a:
  sendReminders    Boolean @default(true) @map("send_reminders")
  anonymousResults Boolean @default(true) @map("anonymous_results")

  // Metadatos:
  createdByName  String?   @map("created_by_name")
  activatedAt    DateTime? @map("activated_at")
  completedAt    DateTime? @map("completed_at")
  totalInvited   Int       @default(0) @map("total_invited")
  totalResponded Int       @default(0) @map("total_responded")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relaciones
  account          Account           @relation(fields: [accountId], references: [id], onDelete: Cascade)
  campaignType     CampaignType      @relation(fields: [campaignTypeId], references: [id])
  participants     Participant[]
  campaignResults  CampaignResult?
  auditLogs        AuditLog[]
  emailLogs        EmailLog[]
  emailAutomations EmailAutomation[]

  @@index([accountId], map: "idx_campaigns_account")
  @@index([status], map: "idx_campaigns_status")
  @@index([campaignTypeId], map: "idx_campaigns_type")
  @@index([startDate, endDate], map: "idx_campaigns_dates")
  @@map("campaigns")
}

// TABLA 4: Participantes (carga manual backend)
model Participant {
  id          String  @id @default(cuid())
  campaignId  String  @map("campaign_id")
  email       String
  uniqueToken String  @unique @map("unique_token")
  // ‚úÖ AGREGAR ESTA L√çNEA
  name        String?

  // Segmentaci√≥n b√°sica (carga manual):
  department     String?
  position       String?
  seniorityLevel String? @map("seniority_level") // junior, mid, senior, executive
  location       String?

  // Estados:
  hasResponded     Boolean   @default(false) @map("has_responded")
  responseDate     DateTime? @map("response_date")
  startedAt        DateTime? @map("started_at")
  reminderCount    Int       @default(0) @map("reminder_count")
  lastReminderSent DateTime? @map("last_reminder_sent")

  // Metadatos:
  ipAddress String?  @map("ip_address")
  userAgent String?  @map("user_agent")
  createdAt DateTime @default(now()) @map("created_at")

  // ‚úÖ CAMPOS DEMOGR√ÅFICOS - AGREGADOS PARA PARTICIPANTUPLOADER v2.0
  dateOfBirth DateTime? @map("date_of_birth")
  gender      Gender?
  hireDate     DateTime? @map("hire_date") @db.Date
  // ‚úÖ DEPARTMENT RELATION FIELD ADDED
  departmentId String? @map("department_id")

  // Relaciones
  campaign      Campaign    @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  responses     Response[]
  emailLogs     EmailLog[]
  departmentRel Department? @relation(fields: [departmentId], references: [id])

  @@unique([campaignId, email])
  @@index([campaignId], map: "idx_participants_campaign")
  @@index([uniqueToken], map: "idx_participants_token")
  @@index([email], map: "idx_participants_email")
  @@index([hasResponded], map: "idx_participants_responded")
  @@index([department], map: "idx_participants_department")
  @@index([departmentId], map: "idx_participants_department_id")
  @@map("participants")
}

// TABLA 5: Preguntas por tipo campa√±a
model Question {
  id               String  @id @default(cuid())
  campaignTypeId   String  @map("campaign_type_id")
  text             String
  category         String // liderazgo, ambiente, desarrollo, bienestar
  subcategory      String? // feedback, reconocimiento, autonomia, etc.
  questionOrder    Int     @map("question_order")
  responseType     String  @default("rating") @map("response_type") // rating, text, choice
  choiceOptions    Json?   @map("choice_options")
  conditionalLogic Json?   @map("conditional_logic")

  // Configuraci√≥n pregunta:
  isRequired Boolean @default(true) @map("is_required")
  isActive   Boolean @default(true) @map("is_active")
  minValue   Int     @default(1) @map("min_value")
  maxValue   Int     @default(5) @map("max_value")

  // Metadatos:
  methodologyReference String?  @map("methodology_reference")
  createdAt            DateTime @default(now()) @map("created_at")

  // Relaciones
  campaignType CampaignType @relation(fields: [campaignTypeId], references: [id])
  responses    Response[]

  @@index([campaignTypeId], map: "idx_questions_campaign_type")
  @@index([category], map: "idx_questions_category")
  @@index([questionOrder], map: "idx_questions_order")
  @@index([isActive], map: "idx_questions_active")
  @@map("questions")
}

// TABLA 6: Respuestas colaboradores
model Response {
  id            String @id @default(cuid())
  participantId String @map("participant_id")
  questionId    String @map("question_id")

  // Respuestas:
  rating         Int?
  textResponse   String? @map("text_response")
  choiceResponse String? @map("choice_response")

  // Metadatos:
  responseTimeSeconds Int?     @map("response_time_seconds")
  createdAt           DateTime @default(now()) @map("created_at")

  // Relaciones
  participant Participant @relation(fields: [participantId], references: [id], onDelete: Cascade)
  question    Question    @relation(fields: [questionId], references: [id])

  @@index([participantId], map: "idx_responses_participant")
  @@index([questionId], map: "idx_responses_question")
  @@index([rating], map: "idx_responses_rating")
  @@index([createdAt], map: "idx_responses_created")
  @@map("responses")
}

// TABLA 7: Resultados agregados + Kit Comunicaci√≥n
model CampaignResult {
  id         String @id @default(cuid())
  campaignId String @unique @map("campaign_id")

  // M√©tricas principales:
  participationRate Decimal @map("participation_rate") @db.Decimal(5, 2)
  overallScore      Decimal @map("overall_score") @db.Decimal(3, 2)
  totalResponses    Int     @map("total_responses")

  // An√°lisis por categor√≠a:
  categoryScores         Json  @map("category_scores") // {liderazgo: 3.2, ambiente: 4.1, ...}
  categoryResponseCounts Json? @map("category_response_counts")

  // An√°lisis b√°sico por segmentaci√≥n:
  segmentAnalysis  Json? @map("segment_analysis")
  departmentScores Json? @map("department_scores")
  positionScores   Json? @map("position_scores")

  // Kit comunicaci√≥n:
  communicationInsights Json  @map("communication_insights")
  keyStrengths          Json? @map("key_strengths")
  keyOpportunities      Json? @map("key_opportunities")

  // Benchmarking b√°sico:
  benchmarkComparison Json?    @map("benchmark_comparison")
  industryBenchmark   Decimal? @map("industry_benchmark") @db.Decimal(3, 2)

  // Metadatos:
  resultsData     Json?    @map("results_data")
  confidenceLevel String?  @map("confidence_level") // high, medium, low
  generatedAt     DateTime @default(now()) @map("generated_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // Relaciones
  campaign Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  @@index([campaignId], map: "idx_results_campaign")
  @@index([generatedAt], map: "idx_results_generated")
  @@map("campaign_results")
}

// TABLA 8: Templates Kit Comunicaci√≥n - ARQUITECTURA CONTEXTUAL
model CommunicationTemplate {
  id                String  @id @default(cuid())
  templateType      String  @map("template_type") // fortaleza, oportunidad, benchmark_superior, etc.
  productContext    String  @default("general") @map("product_context") // NUEVO CAMPO
  category          String? // liderazgo, ambiente, desarrollo, bienestar, general
  conditionRule     String  @map("condition_rule") // "score >= 4.0", "participation < 50"
  templateText      String  @map("template_text")
  variablesRequired Json?   @map("variables_required") // ["category", "score"]
  priority          Int     @default(0)
  isActive          Boolean @default(true) @map("is_active")

  // Metadatos:
  usageCount Int      @default(0) @map("usage_count")
  createdAt  DateTime @default(now()) @map("created_at")

  @@unique([templateType, productContext]) // REGLA DE UNICIDAD COMPUESTA
  @@index([category], map: "idx_templates_category")
  @@index([isActive], map: "idx_templates_active")
  @@index([priority], map: "idx_templates_priority")
  @@index([productContext], map: "idx_templates_product_context")
  @@map("communication_templates")
}

// TABLA 9: Audit Log (Para debugging y compliance)
model AuditLog {
  id         String   @id @default(cuid())
  accountId  String?  @map("account_id")
  campaignId String?  @map("campaign_id")
  action     String // campaign_created, campaign_activated, participant_added, etc.
  entityType String?  @map("entity_type") // campaign, participant, response
  entityId   String?  @map("entity_id")
  oldValues  Json?    @map("old_values")
  newValues  Json?    @map("new_values")
  userInfo   Json?    @map("user_info") // IP, user agent, etc.
  createdAt  DateTime @default(now()) @map("created_at")

  // Relaciones
  account  Account?  @relation(fields: [accountId], references: [id])
  campaign Campaign? @relation(fields: [campaignId], references: [id])

  @@index([accountId], map: "idx_audit_account")
  @@index([campaignId], map: "idx_audit_campaign")
  @@index([action], map: "idx_audit_action")
  @@index([createdAt], map: "idx_audit_created")
  @@map("audit_logs")
}

// TABLA 10: Email Logs para tracking
model EmailLog {
  id            String    @id @default(cuid())
  participantId String    @map("participant_id")
  campaignId    String    @map("campaign_id")
  emailType     String    @map("email_type") // 'invitation', 'reminder_1', 'reminder_2'
  templateId    String    @map("template_id")
  sentAt        DateTime  @map("sent_at")
  deliveredAt   DateTime? @map("delivered_at")
  openedAt      DateTime? @map("opened_at")
  clickedAt     DateTime? @map("clicked_at")
  bouncedAt     DateTime? @map("bounced_at")
  complainedAt  DateTime? @map("complained_at")
  openCount     Int       @default(0) @map("open_count")
  clickCount    Int       @default(0) @map("click_count")
  status        String    @default("sent") // 'sent', 'delivered', 'bounced', 'complained'
  bounceReason  String?   @map("bounce_reason")

  participant Participant @relation(fields: [participantId], references: [id], onDelete: Cascade)
  campaign    Campaign    @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  @@index([participantId], map: "idx_email_logs_participant")
  @@index([campaignId], map: "idx_email_logs_campaign")
  @@index([emailType], map: "idx_email_logs_type")
  @@index([status], map: "idx_email_logs_status")
  @@index([sentAt], map: "idx_email_logs_sent")
  @@map("email_logs")
}

// TABLA 11: Email Automation Rules
model EmailAutomation {
  id          String    @id @default(cuid())
  campaignId  String    @map("campaign_id")
  triggerType String    @map("trigger_type") // 'reminder_1', 'reminder_2'
  triggerAt   DateTime  @map("trigger_at")
  processedAt DateTime? @map("processed_at")
  enabled     Boolean   @default(true)
  templateId  String    @map("template_id")

  campaign Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  @@index([campaignId], map: "idx_email_automation_campaign")
  @@index([triggerType], map: "idx_email_automation_type")
  @@index([triggerAt], map: "idx_email_automation_trigger")
  @@index([enabled], map: "idx_email_automation_enabled")
  @@map("email_automations")
}

// TABLA 12: DEPARTMENTS
model Department {
  id               String   @id @default(cuid())
  accountId        String   @map("account_id")
  displayName      String   @map("display_name")
  standardCategory String?  @map("standard_category") // ventas, marketing, desarrollo, rrhh, operaciones, otros
  isActive         Boolean  @default(true) @map("is_active")
  createdAt        DateTime @default(now()) @map("created_at")

  // NUEVOS CAMPOS - Jerarqu√≠a
  parentId             String?  @map("parent_id")
  parent               Department? @relation("DepartmentHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  children             Department[] @relation("DepartmentHierarchy")
  unitType             String   @default("departamento") @map("unit_type")
  level                Int      @default(3)
  employeeCount        Int      @default(0) @map("employee_count")
  
  // NUEVOS CAMPOS - Contexto organizacional
  technicalComplexity   String   @default("media") @map("technical_complexity")
  emotionalComplexity   String   @default("media") @map("emotional_complexity")
  marketScarcity        String   @default("normal") @map("market_scarcity")

  // Relaciones
  account      Account       @relation(fields: [accountId], references: [id], onDelete: Cascade)
  participants Participant[]
  users User[] // AGREGAR solo esta l√≠nea

  @@unique([accountId, displayName])
  @@index([accountId], map: "idx_departments_account")
  @@index([standardCategory], map: "idx_departments_category")
  @@index([isActive], map: "idx_departments_active")
  @@map("departments")
}

// ========== NUEVA TABLA PARA CONFIGURACI√ìN DE ENCUESTAS ==========
// TABLA 13: Survey Configurations
model SurveyConfiguration {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  campaignTypeId   String   @unique @map("campaign_type_id")
  categoryConfigs  Json     @default("{}") @map("category_configs")
  conditionalRules Json     @default("[]") @map("conditional_rules")
  uiSettings       Json     @default("{}") @map("ui_settings")
  validationRules  Json     @default("[]") @map("validation_rules")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")
  
  campaignType CampaignType @relation(fields: [campaignTypeId], references: [id], onDelete: Cascade)
  
  @@map("survey_configurations")
}
// TABLA 14: USERS - Sistema Multi-usuario
model User {
  id           String   @id @default(cuid())
  accountId    String   @map("account_id")
  email        String   @unique
  name         String
  passwordHash String   @map("password_hash")
  
  // Sistema de roles
  role         String   @default("VIEWER") // ACCOUNT_OWNER, HR_MANAGER, AREA_MANAGER, DIRECTOR, VIEWER
  departmentId String?  @map("department_id") // NULL = acceso total
  
  // Control y auditor√≠a
  isActive     Boolean  @default(true) @map("is_active")
  lastLoginAt  DateTime? @map("last_login_at")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  
  // Relaciones
  account      Account @relation(fields: [accountId], references: [id], onDelete: Cascade)
  department   Department? @relation(fields: [departmentId], references: [id])
  
  @@index([accountId])
  @@index([email])
  @@map("users")
}